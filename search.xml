<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[js-module]]></title>
    <url>%2F2018%2F11%2F02%2Fjs-module%2F</url>
    <content type="text"><![CDATA[前言最近遇到很多朋友问 Javascript 模块化使用的问题，然后发现对这这个也是一知半解，偶尔还会搞混，在项目中使用的时候会出各种小错误，所以就写一下，复习一下 Javascript 模块化的知识和使用方式。 模块通常是指编程语言所提供的代码组织机制，利用此机制可将程序拆解为独立且通用的代码单元。所谓模块化主要是解决代码分割、作用域隔离、模块之间的依赖管理以及发布到生产环境时的自动化打包与处理等多个方面。 1 模块化的优点 可维护性。因为模块是独立的，一个设计良好的模块会让外面的代码对自己的依赖越少越好，这样自己就可以独立去更新和改进。 命名空间。在 JavaScript 里面，如果一个变量在最顶级的函数之外声明，它就直接变成全局可用。因此，常常不小心出现命名冲突的情况。使用模块化开发来封装变量，可以避免污染全局环境。 重用代码。我们有时候会喜欢从之前写过的项目中拷贝代码到新的项目，这没有问题，但是更好的方法是，通过模块引用的方式，来避免重复的代码库。 2 模块化规范2.1 CommonJS 规范CommonJS 是 Mozilla 的工程师于 2009 年开始的一个项目，他的目的是让浏览器之外的 Javascript （比如服务器端或者桌面端）能够通过模块化的方式来开发和协作。 在 CommonJS 规范中，每个 JS 文件就是一个独立的模块上下文（module context），在这个上下文中创建的属性都是私有的。也就是说，在一个文件定义的变量（包括函数和类），都是私有的，对其他文件是不可见的。 2.1.1 实例这里分两种情况讲明吧，一种是一个文件中导出一个模块，这种我们引入模块的时候可以定义随便一个变量名去接入使用模块。另外则是一个文件中导出多个模块。这种情况的话，模块文件导出的是一个包含多个模块的对象，我们导入引用的时候只能是用一个对象 {} 引用，然后这边使用的模块名必须要和源文件中导出的模块名一致。（这边有点绕，具体看代码就明白了） 一个文件导出一个模块 123456789// sayHello.jsfunction sayHello()&#123; console.log('hello')&#125;module.exports = sayHello//main.js 中引入 sayHello.js// 引入单个模块，这里引入的时候可以 say，sayHello 等等变量名去定义导入的模块 const say = require('./sayHello.js'); 一个文件导出多个模块 12345678910111213// say.jsfunction sayHi()&#123; console.log('hello'); &#125;function sayBye()&#123; console.log('bye');&#125;module.exports = &#123;sayBye,sayHi&#125;/* main.js* 这个时候引用的话，用&#123;&#125;去引用导出的模块，怎么导出我们就怎么引用，然后里面的模块名就只能是引用文件 say.js 里面定义的 sayBye，sayHi 变量名*/const &#123;sayBye, sayHello&#125; = require('./say.js'); 2.1.2 注意事项因为 CommonJS 规范主要应用的场景是服务器端，所以采用同步加载模块的策略。如果我们依赖 3 个模块，代码会一个一个一次加载，这种的话就不适合浏览器端来使用了。 2.2 AMD 规范AMD 是 Asynchronous Module Definition 的简称，即『异步模块定义 』，见名知义，AMD 优先照顾浏览器模块的加载场景，使用异步加载和回调的方式。注意使用模式需要 define 方法的支持。一般是引用 requireJS 2.2.1 实例123456789101112131415// file lib/sayModule.js define(function ()&#123; return &#123; sayHello: function () &#123; console.log('hello'); &#125; &#125;; &#125;); //file main.js define(['./lib/sayModule'], function (say)&#123; say.sayHello(); //hello &#125;) 这种形式感觉有点烦，个人基本都没怎么用。 2.3 CMD 规范CMD 是 Common Module Definition，公共模块定义， 2.4 ES6 规范ES6 规范用的就比较多了，他的话比较简单清晰，就分为导出（export）与导入（import）两个模块 然后他的使用方式也是有很多种情况。 直接用 export {模块，模块} 导出。引用的话就直接用 import from 导出就可以了。 123456789// module.jslet fn = function()&#123; console.log('test');&#125;let bar = 'bar';export &#123;fn, bar&#125;// main.jsimport &#123;bar, fn&#125; from './module'; 重命名导出与导入。有时候发现我引用了两个文件的模块的名字是一样的，然后就会出现命名冲突了，这个时候就需要重命名导出导入来解决这种情况了，具体就看代码了。 12345678// 导出重命名let name = 'name';// 这个时候其他文件导入的时候就用 newName 导入了export &#123; name as newName&#125;// 导入重命名// 这样我们就用 newName 这个名字重命名原来的模块了。import &#123; moduleName as newName&#125; from 'test' export default 匿名导出，如果只想导出一个 js 模块或者功能，可以直接用 export default 导出 123456// module.js 字符串，方法，对象，想导出啥就导出啥export default 'string';// main.js XX YY，想用啥命名就用啥命名，毕竟导出的就只有一个对象import XXX from './lib'console.log(XXX) // 'string' 总结一般就用 ES6 的规范和 CommonJS 的规范，AMD 和CMD 实在不熟，就没用过了。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>模块化</tag>
        <tag>CommonJS</tag>
        <tag>AMD</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单学习 Promise 对象]]></title>
    <url>%2F2018%2F10%2F24%2Flearn-promise%2F</url>
    <content type="text"><![CDATA[引言 Promise 是异步编程的一种解决方案，比传统的解决方案——回调和事件——更合理且强大。最近的项目要用到这个，就参考阮一峰老师的《ES6标准入门》这本书简单学一下了。 1 Promise 的含义所谓 Promise ，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上来看，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。 Promise 对象有以下两个特点。 对象的状态不受外界影响。 一旦状态改变就不会再变。 2 基本用法ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。举个例子。 123456789var promise = new Promise(function (resolve, reject) &#123; // some code if (/* 异步操作成功*/) &#123; resolve(value); &#125; else &#123; // 异步操作失败 reject(error); &#125;&#125;); Promise 构造函数接收一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。他们是两个函数，由 Javascript 引擎提供，不用自己部署。 resolve 函数的作用是将 Promise 对象的状态从『未完成』（Pending）变为『成功』（Resolved），在异步操作成功的时候调用，并将异步操作的结果作为参数传递过去。 reject 函数的作用是，将 Promise 对象的状态从『未完成』（Pending）变为『失败』（Rejected） 当我们生成了一个 Promise 实例之后。就可以用 then 方法分别指定 Resolved 状态和 Rejected 状态的回调函数。 1234567promise.then(function (value) &#123; // success console.log(value);&#125;, function (error) &#123; // failed console.log(error);&#125;); then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 Resolved 时调用，第二个回调函数是 Promise 对象的状态变为 Rejected 时调用。其中第二个参数是可选的，不一定要提供。这两个函数都接收 Promise 对象传出的值作为参数。 我们来个小例子 1234567891011121314let promise = new Promise(function(resolve,reject)&#123; console.log('Promise'); let value = 'value'; resolve(value);&#125;);promise.then(function(value)&#123; console.log(value);&#125;);console.log('Hi');// Promise// Hi// value 上面的代码中，Promise 新建后会立即执行，所以首先输出的是 Promise。然后，then 方法指定的回调函数将当前脚本所有同步任务执行完成后才会执行，所以 Resolved 最后输出。 3 Promise.prototype.then()Promise 实例具有 then 方法，即 then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加改变状态时的回调函数。前面说过，then 方法的第一个参数是 Resolved 状态的回调函数，第二个参数（可选）是 Rejected 状态的回调函数。 then 方法返回的是一个新的 Promise 实例（注意 不是原来的那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。 12345getJSON("/posts.json").then(function(json) &#123; return json.post;&#125;).then(function(post) &#123; // ...&#125;); 上面的代码使用 then 方法依次指定了两个回调函数。第一个回调函数完成以后，将会返回结果作为参数，传入第二个回调函数。 然后采用链式的 then 可以指定一组按顺序调用的回调函数。这时，前一个回调函数有可能返回的还是一个 Promise 对象（即有异步操作），而后一个回调函数就会等待该 Promise 对象的状态发生变化，再被调用。 4 Promise.prototype.catch()Promise.prototype.catch 方法是 .then(null, rejection) 的别名，用于指定发生错误时的回调函数。 123456getJSON('/posts.json').then(function(posts) &#123; // ...&#125;).catch(function(error) &#123; // 处理 getJSON 和 前一个回调函数运行时发生的错误 console.log('发生错误！', error);&#125;); 上面的代码中，getJSON 方法返回一个 Promise 对象，如果该对象状态变为 Resolved，则会调用 then 方法指定的回调函数；如果异步操作抛出错误，状态就会变成 Rejected，然后调用 catch 方法指定的回调函数处理这个错误。另外， then 方法指定的回调函数如果在运行中抛出错误，也会被 catch 方法捕获。 123456p.then((val) =&gt; console.log('fulfilled:', val)) .catch((err) =&gt; console.log('rejected', err)); // 等同于 p.then((val) =&gt; console.log('fulfilled:', val)) .then(null, (err) =&gt; console.log("rejected:", err)); 下面是一个例子。 1234567const promise = new Promise(function(resolve, reject) &#123; throw new Error('test');&#125;);promise.catch(function(error) &#123; console.log(error);&#125;);// Error: test 上面的代码中，Promise 抛出一个错误就被 catch 方法指定的回调函数所捕获。注意，上面的写法和下面两种写法是等价的。12345678910111213141516171819// 写法一const promise = new Promise(function(resolve, reject) &#123; try &#123; throw new Error('test'); &#125; catch(e) &#123; reject(e); &#125;&#125;);promise.catch(function(error) &#123; console.log(error);&#125;);// 写法二const promise = new Promise(function(resolve, reject) &#123; reject(new Error('test'));&#125;);promise.catch(function(error) &#123; console.log(error);&#125;); 由上面可以看出， reject 方法的作用等同于抛出错误。如果 Promise 状态已经变成 Resolved，在抛出错误是无效的。123456789const promise = new Promise(function(resolve, reject) &#123; resolve('ok'); // Promise 状态已变成 已完成 throw new Error('test');&#125;);promise .then(function(value) &#123; console.log(value) &#125;) .catch(function(error) &#123; console.log(error) &#125;);// ok 注意 一般来说，不要在 then 方法中定义 Reject 状态的回调函数（即 then 的第二个参数），而是使用 catch 方法。 12345678910111213141516// badpromise .then(function(data) &#123; // success &#125;, function(err) &#123; // error&#125;);// goodpromise .then(function(data) &#123; //cb // success &#125;) .catch(function(err) &#123; // error &#125;); 上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面 then 方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用 catch 方法，而不使用 then 方法的第二个参数。 5 Promise.all()Promise.all 方法是将多个 Promise 对象实例包装成一个新的实例。 1var p = Promise.all([p1, p2, p3]); 上面的代码中，Promise.all() 方法接受一个数组作为参数，p1, p2, p3 都是 Promise 对象的实例。如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转换为 Promise 实例，再进一步处理（Promise.all 方法的参数不一定是数组，但是必须具有 Iterator 接口，且每个返回成员都是 Promise 实例）。 p 的状态由 p1, p2, p3 决定，分成两种情况 只有 p1, p2, p3 的状态都变成 FulFilled，p 的状态才会变成 FulFilled，此时 p1, p2, p3 的返回值组成一个数组，传递给 p 的回调函数。 只要 p1，p2，p3 中有一个被 Rejected ，p 的状态就直接变成 Rejected，此时第一个被 Rejected 的实例的返回值会传递给 p 的回调函数。 下面是一个具体例子。12345678910111213var promises = [2,3,4,5].map(function(id)&#123; console.log(id) &#125;); Promise.all(promises).then(function(res)&#123; console.log(res); resolve &#125;).catch(function(error)&#123; console.log(error); &#125;);// 先执行所有 promise 实例的异步操作，然后吧操作的结果打包数组返回// 2 3 4 5 [undefined,undefined,undefined,undefined] 上面的代码中，Promise 是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成 fulfilled，或者其中有 1 个变成 rejected，才会调用 Promise.all 方法后面的回调函数。 6 Promise.race()Promise.race 方法同样是将多个 Promise 实例包装成一个新的 Promise 实例。 1var p = Promise.race([p1, p2, p]) 上面的代码中，只要 p1, p2, p3 中 有一个实例 率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值就传递给 p 的回调函数。Promise.race 方法的参数与 Promise.all 方法一样，如果不是 Promise 实例，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。 下面是一个例子,如果指定时间内没有获得结果，就将 Promise 的状态变成 Rejected，否则就变为 Resolved。 12345678910const p = Promise.race([ fetch('/resource-that-may-take-a-while'), new Promise(function (resolve, reject) &#123; setTimeout(() =&gt; reject(new Error('request timeout')), 5000) &#125;)]);p.then(console.log).catch(console.error); 上面代码中，如果 5 秒之内 fetch 方法无法返回结果，变量 p 的状态就会变为 rejected，从而触发 catch 方法指定的回调函数。 7 Promise.resolve()有时需要将现有对象转为 Promise 对象，Promise.resolve 方法就起到这个作用。 1const jsPromise = Promise.resolve($.ajax('/whatever.json')); 上面代码将 jQuery 生成的 deferred 对象，转为一个新的 Promise 对象。 Promise.resolve 等价于下面的写法。 123Promise.resolve('foo')// 等价于new Promise(resolve =&gt; resolve('foo')) Promise.resolve方法的参数分成四种情况。 7.1 参数是一个 Promise 实例如果参数是一个 Promise 实例，那么 Promise.resolve 将不做任何修改，原封不动的返回这个实例。 7.2 参数是一个 thenable 对象thenable 对象是指具有 then 方法的对象，例如下面这个对象 12345let thenable = &#123; then: function(resolve, reject) &#123; resolve(42); &#125;&#125;; Promise.resolve 方法会将这个对象转为 Promise 对象，任何执行 thenable 对象的 then 方法。 12345678910let thenable = &#123; then: function(resolve, reject) &#123; resolve(42); &#125;&#125;;let p1 = Promise.resolve(thenable);p1.then(function(value) &#123; console.log(value); // 42&#125;); 上面的代码中， thenable 对象的 then 方法执行后，对象 p1 的状态就变为 resolved，从而立即执行最后的 then 方法指定的回调函数。输出 42。 7.3 参数不是具有 then 方法的对象，或根本就不是对象如果参数是一个原始值，或者是一个不具有 then 方法的对象，那么 Promise.resolved 方法返回一个新的 Promise 对象，状态为 Resolved。 123456const p = Promise.resolve('Hello');p.then(function (s)&#123; console.log(s)&#125;);// Hello 上面代码生成一个新的 Promise 对象的实例 p。由于字符串 Hello 不属于异步操作（判断方法是字符串对象不具有 then 方法），返回 Promise 实例的状态从一生成就是 resolved，所以回调函数会立即执行。Promise.resolve 方法的参数，会同时传给回调函数。 7.4 不带有任何参数Promise.resolved 方法允许在调用时不带有参数，而直接返回一个 Resolved 状态的 Promise 对象。 所以，如果你希望得到一个 Promise 对象，比较方便的方法就是直接调用 Promise.resolve 方法。 12345const p = Promise.resolve();p.then(function () &#123; // ...&#125;); 上面代码中的 p 就是一个 Promise 对象。需要注意的是，立即 resolve 的 Promise 对象实在本轮 『事件循环』（event loop）结束时，而不是在下一轮『事件循环』开始时。 12345678910111213setTimeout(function () &#123; console.log('three');&#125;, 0);Promise.resolve().then(function () &#123; console.log('two');&#125;);console.log('one');// one// two// three 上面代码中，setTimeout(fn, 0) 在下一轮『事件循环』开始时执行，Promise.resolve() 在本轮『事件循环』结束时执行，console.log(&#39;one&#39;) 则是立即执行，因此最先输出。 8 Promise.reject()Promise.reject(resson) 方法也会返回一个新的 Promise 实例，状态为 Rejected （这个就暂时想不懂怎么应用了）。 12345678const p = Promise.reject('出错了');// 等同于const p = new Promise((resolve, reject) =&gt; reject('出错了'))p.then(null, function (s) &#123; console.log(s)&#125;);// 出错了 上面的代码生成一个 Promise 对象的实例 p，状态为 Rejected，回调函数会立即执行。 总结以上就是关于 Promise 学习的内容，如有错误的地方就请在下面评论处，发表一下看法，当然也可以放一下关于进阶学习 Promise 的文章，大家一起学习。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongose 插件的简单使用]]></title>
    <url>%2F2018%2F10%2F23%2Fusing-mongoose%2F</url>
    <content type="text"><![CDATA[摘要 由于毕业设计要做小程序·云开发，它那边的云数据库是非关系数据库，所以就要用一下非关系型的数据库来开发了，这里的话，我就使用比较常用的 mongoDB 这个非关系型的数据库了。然后调用它的话一般使用 mongoose 这个插件来用，趁着做毕设，就学习一下怎么用这个家伙吧。 1 安装1npm i mongoose 2 使用2.1 连接 mongoDB在后台跑起来后或者是初始化请求的时候，引入mongoose，连接数据库，以我搭的 express 框架为例，在路由的 index 文件中连接数据库。 12345678910111213const mongoose = require('mongoose');/** * 连接 mongoDB 的 user 数据库 */mongoose.connect('mongodb://localhost/user');const db = mongoose.connection;// 连接失败db.on('error', console.error.bind(console, 'connection error:'));// 连接成功db.once('open', function() &#123; console.log("mongoDB connected success"); // we're connected!&#125;); 2.2 创建连接Mongoose 里，一切都始于 Schema。 现在我们来看一个我项目中例子。（鉴于篇幅，删减了哈） 123const user = new mongoose.Schema(&#123; userId:String&#125; 现在我们就创建了一个 带有 String 类型 userId 属性的 schema。接着我们需要把这个 schema 编译成一个 Model。通过这个 Model 我们就能够直接操纵数据库里面的数据了 1234/*model 的参数1 导出的模块名， 参数2 创建的 Schema，参数3 指定数据库中的集合的名字，若不加的，则抹默认取‘第一个参数s’的集合*/module.exports = mongoose.model('User',user,'user'); 2.3 做个小查询首先我们需要先引入模块 1const User = require('./../../models/user'); 接下来就是直接查询了 12345678// 获取 user 表中的所有数据User.find(function (err, doc) &#123; if (err)&#123; return console.error(err); &#125; // 打印查询到的内容，后面要怎么操作这些数据就看具体的业务需求了 console.log(doc);&#125;) 如果我们想获取特定的数据，这个时候就了解有一下 query 的用法了,下面给出一个简单的小例子。12// 这么写可以获取所有 name 为 "Fluff" 开头的数据,然后在 callback 里面去写怎么处理那些数据咯User.find(&#123; name: /^fluff/ &#125;, callback); 关于 mongoose 的简单使用就差不多这个样子了]]></content>
      <categories>
        <category>项目经验</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack3 迁移到 Webpack4]]></title>
    <url>%2F2018%2F10%2F16%2Fupdate-webpack4%2F</url>
    <content type="text"><![CDATA[为什么要迁移其实我是不知道的，只是实习的公司的项目要迁移，所以采取了解这方面的东西，公司的原因是由于公司项目越来越大，需要的依赖越来越多，导致开发的时候重新构建的时候速度十分缓慢，开发效率很低。 升级 webpack4 直奔主题，直接开始升级 首先升级 webpack4 到 4.8.1 （当然其他 4 的版本都是可以的），顺便安装一下 webpack-cli1npm install webpack@4.8.1 webpack-cli -D 然后我们 npm run dev 一下。 『报错啦！』 这个是因为 webpack 和 webpack-dev-server 版本不兼容，升级一下就好了 1npm install webpack-dev-server@3.1.4 -D 再次启动，又报错了。。。 这里是因为 html-webpack-plugin 版本不兼容导致的，网上给出的解决方案大部分是说执行 yarm add webpack-contrib/html-webpack-plugin -D 但是现在作者已经更新版本了，直接升级版本就可以了，不需要再去安装 webpack 官方的替代版本1npm install html-webpack-plugin@3.2.0 -D 再次启动，再次报错 升级一下 eslint 和 eslint-loader 吧1npm install eslint eslint-loader@2.0.0 -D 继续报错 升级 vue-loader 吧1npm install vue-loader@15.0.10 -D 错的更彻底了 这是因为新版的 vue-loader 需要加入一个新的配置 VueLoaderPlugin。所以要在下面这些文件修改一下配置。 1234567891011121314151617181920// webpack.dev.conf.js 文件// 引入 VueLoaderPluginconst &#123; VueLoaderPlugin &#125; = require('vue-loader')// 在下面的插件中添加 VueLoaderPlugin plugins: [ ... new VueLoaderPlugin(), ... ] // webpack.prod.conf.js 文件// 这个和上面的文件一样处理了// 引入 VueLoaderPluginconst &#123; VueLoaderPlugin &#125; = require('vue-loader')// 在下面的插件中添加 VueLoaderPlugin plugins: [ ... new VueLoaderPlugin(), ... ] 再来，再来 这个是 webpack4 需要指定一下打包的模式（mode），指定一下就好，直接该配置就行了。『不要慌，小问题』 1234567891011// webpack.dev.conf.js文件const devWebpackConfig = merge(baseWebpackConfig, &#123; mode: 'development', module: &#123;...&#125;&#125;,//同理在 webpack.prod.conf.js 文件const devWebpackConfig = merge(baseWebpackConfig, &#123; mode: 'production', module: &#123;...&#125;&#125;, 疲惫的手再次按起了 npm run dev 震惊！居然没错了，居然可以运行了。好的，webpack4 升级结束，撒花！！ 然而当我默默敲起了 npm run build 该错的终究还是要错的啊。。 这部分的错误是因为 webpack.optimize.CommonsChunkPlugin 已经被弃用，需要使用新的配置 config.optimization.splitChunks，在下面的文件再改一下配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// webpack.prod.conf.js 文件// 在 plugins 同级下添加下面代码optimization: &#123; splitChunks: &#123; cacheGroups: &#123; vendor: &#123; test: /[\\/]node_modules[\\/]/, name: 'vendor', chunks: 'all' &#125;, manifest: &#123; name: 'manifest', minChunks: Infinity &#125;, &#125; &#125;, &#125;, // 嗯，就在上面加这一段代码 plugins:[...] // 分割线// 再去掉该文件中 plugins 中的这部分代码 new webpack.optimize.CommonsChunkPlugin(&#123; name: 'vendor', minChunks(module) &#123; // any required modules inside node_modules are extracted to vendor return ( module.resource &amp;&amp; /\.js$/.test(module.resource) &amp;&amp; module.resource.indexOf( path.join(__dirname, '../node_modules') ) === 0 ) &#125; &#125;), // extract webpack runtime and module manifest to its own file in order to // prevent vendor hash from being updated whenever app bundle is updated new webpack.optimize.CommonsChunkPlugin(&#123; name: 'manifest', minChunks: Infinity &#125;), // This instance extracts shared chunks from code splitted chunks and bundles them // in a separate chunk, similar to the vendor chunk // see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk new webpack.optimize.CommonsChunkPlugin(&#123; name: 'app', async: 'vendor-async', children: true, minChunks: 3 &#125;), ...// 不要客气，全删了，怕错就先注释掉呗。 让我们再次打包 『这个是大问题，要慌！』这个是因为官方已经不推荐使用 extract-text-webpack-plugin 提取 css 样式，可以使用 mini-css-extract-plugin 替代如果不想改变的话可以升级 extract-text-webpack-plugin 1&quot;extract-text-webpack-plugin&quot;: &quot;^4.0.0-beta.0&quot;, 但是，我们还是要用推荐的 mini-css-extract-plugin 首先安装一下插件1npm install mini-css-extract-plugin -D 记得去掉 package.json 中的包 “extract-text-webpack-plugin”: “^4.0.0-beta.0” 然后我们又来改配置了 1234567891011121314151617181920212223242526272829303132333435363738//build 里面的util.js 文件// 1 去掉 extract-text-webpack-pluginconst ExtractTextPlugin = require('extract-text-webpack-plugin') // 走好了您咧// 2 引入新大佬const MiniCssExtractPlugin = require('mini-css-extract-plugin')// 3 修改下面的 generateLoaders 函数// 删掉原来的即我注释的代码，修改成下面这个样子function generateLoaders (loader, loaderOptions) &#123; ... if (options.extract) &#123; // return ExtractTextPlugin.extract(&#123; // use: loaders, // fallback: 'vue-style-loader' // &#125;) return [MiniCssExtractPlugin.loader].concat(loaders) &#125; else &#123; return ['vue-style-loader'].concat(loaders) &#125;&#125;// webpack.prod.conf.js文件// 1 去掉 extract-text-webpack-plugin// 删这个const ExtractTextPlugin = require('extract-text-webpack-plugin') // 加下面的const MiniCssExtractPlugin = require('mini-css-extract-plugin')// 2 去掉 plugins 里的配置 new ExtractTextPlugin(&#123; filename: utils.assetsPath('css/[name].[contenthash].css'), allChunks: true, &#125;),// 3 在 plugins 加入新的插件配置 new MiniCssExtractPlugin(&#123; filename: utils.assetsPath('css/[name].[contenthash:12].css'), allChunks: true, &#125;), 最后再打包。。。 欢乐女神，圣洁美丽，webpack4 升级完成咧，如有其他问题，留言加百度，我们一起研究研究。]]></content>
      <categories>
        <category>项目经验</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>升级Webpack4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则基础知识]]></title>
    <url>%2F2018%2F10%2F13%2Freg-knowledge%2F</url>
    <content type="text"><![CDATA[正则表达式1 定义正则12let reg = new RegExp("G");//RegExp对象，参数就是我们要制定的规则let reg = /G/; //一般写法，推荐使用，性能更好 2 常用方法 test()：在字符串中查找符合正则的内容，找到返回true，反之返回false 1234//判断数字是否有非数字let str ='1233456';let reg = /\D/;console.log(reg.test(str));//false exec() RegExp的exec()方法和String的match()方法很类似，它对一个指定的字符串执行一个正则表达式匹配，如果没有找到任何一个匹配，它将返回null，否则返回一个数组，这个数组的第一个元素包含的是与正则表达式相匹配的字符串,余下的所有元素包含的是匹配的各个分组。而且，正则表达式对象的index属性还包含了匹配发生的字符串的位置，属性input引用的则是被检索的字符串。如果正则表达式具有g标志，它将把该对象的lastIndex属性设置到紧接着匹配字符串的位置开始检索，如果exec()没有发现任何匹配，它将把lastIndex属性重置为0，这一特殊的行为可以使你可以反复调用exec()遍历一个字符串中所有的正则表达式匹配。1234let str5 = 'cat,fat,bat,sat,cct';let reg5 = /.at/g;reg5.lastIndex = 10;console.log(reg5.exec(str5));//[ 'cat', index: 0, input: 'cat,fat,bat,sat,cct' ] replace():查找符合正则的字符串，替换成对应的字符串 1234567891011121314//替换关键字let str4 = '七夕，JJ，我在月下等你';let reg4 = /七夕|JJ/g;/*str4 = str4.replace(reg4,'*');console.log(str4);//*，*，我在月下等你.有点问题啊，那么就不要直接替换，我们用个回调函数解决*/str4 = str4.replace(reg4,function (str4) &#123; let res = ''; for(let i =0;i&lt;str4.length;i++)&#123; res +='*'; &#125; return res;&#125;);console.log(str4);//**，**，我在月下等你 search():在字符串搜索符合正则的内容，搜索到就返回出现的位置注意：如果找到多个，则只会返回第一个找到的字符的位置，找不到就返回- 1234//在字符串中找到字母b，且不区分大小写let str2 = 'abcbdef';let reg2 = /B/gi;console.log(str2.search(reg2));//2 找到的第一个字符的位置 match():在字符串中搜索符合规则的内容，搜索成功就返回内容，反之则返回null 1234//找到指定格式的所有数字let str3 = 'haj123sdk54hask33dkhalsd879';let reg3 = /\d+/g;//每次至少匹配一个数字console.log(str3.match(reg3));//[ '123', '54', '33', '879' ] 3 常见字符 转义字符 这几个常见转义字符还是要的顺手记下滴12345678\s :空格\S :非空格\d :数字\D :非数字\w :字符（字母，数字，下划线那些）\W :非字符. :任意字符\. :真正的点 量词 123456&#123;n,m&#125; :出现n~m次&#123;n,&#125; :至少n次&#123;n&#125; :出现n次* :任意次? :1次或者0次，相当于&#123;0,&#125;+ :1~n次 其他符号 123456^ :匹配输入串的开始位置$ :匹配输入串的结束位置[] :[]里面的任意字符[^] :非[]里面的任意字符() :分组符，小括号中的项叫做正则的子项$1($n) :正则式中的第1（n）个子项]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[配置自己的github博客]]></title>
    <url>%2F2018%2F10%2F10%2Fdeploy-hexo%2F</url>
    <content type="text"><![CDATA[1 项目结构1.1 _config.yml网站的配置信息，在这边配置网站的大部分信息 1.2 scaffolds模板文件夹，新建文件会根据里面的模板创建新的文件 1.3 source资源文件夹是存放用户资源的地方，然后 _posts 是存放 markdown 文章的地方 1.4 themes主题文件夹，hexo 会根据主题生成静态文件夹。本次我们使用的主题是 Next 主题主题网站 2 _config.yml 的配置2.1 网站我们可以在 _config.yml 文件 中修改大部分的配置，具体咋配置，我就偷个懒了。直接贴中文文档的图了。其中，language 就设置为 zh-Hans 啦，毕竟咱还是用中文写博客的，当然如果有大佬想搞个国际化的全英博客的话就另当别论了。 description 主要用于SEO，告诉搜索引擎一个关于我们站点的简单描述，官方是推荐在里面写我们站点的关键字，主题啥的，但是个人咧还是比较喜欢直接写个个人签名╭(╯^╰)╮ author 参数就是来说这个博客的是谁家的孩子啦。 2.2 网址如果你的网站存放在子目录中，例如 http://yoursite.com/blog，则请将你的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 2.3 目录这里是高端局，我这种菜鸡就老老实实跟着官方走，不乱改了。 2.4 文章默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 example.com，您有一篇文章名为 hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 2.5 其他 3 其他配置3.1 标签、分类、关于设置仔细看了一下上面关于目录的配置，然后又看了其他人的 hexo 博客，心头是不是一阵疑惑，咦，咋感觉自己少了那么多目录结构咧。咋整啊？自己装呗。123hexo new page &quot;tags&quot;hexo new page &quot;categories&quot;hexo new page &quot;about&quot; 执行完这三条命令后，在站点的source 的目录下就生成了 tags，about，categories 三个文件夹然后就分别到 source 文件夹中新生成的 about 文件夹里面的 index.md 中添加下面的代码type: “tags”重新运行之后是不是就出来了，什么？出不来？好吧，我错了，这样的话就要去看你选择的 theme 里面的配置了，把 menu 里面对这三个菜单项的注释去掉，就可以了。再不行的话，那就那就，百度吧。 3.2 关联到 github pages 修改 _config.yml, 在文件最底部添加如下代码 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: ssh://git@github.com/你的github名/你的github名.github.io.git branch: master 安装一个 hexo 插件 1npm install hexo-deployer-git --save 部署项目，就直接运行下面三条命令就行了 123hexo clean // 清除原来打包的项目hexo g // 生成新的项目hexo d // 上传项目到github 最后的最后，让我们打开浏览器，输入 https://你的github用户名.github.io，例如我的 https://lijiayuan365.github.io\ 4 真正的最后强烈推荐下面这位大佬的博客 Hexo 博客主题的设置与完善，可以说是相当的全面与仔细了，快速配置好你的博客。]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>配置博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex布局]]></title>
    <url>%2F2018%2F08%2F26%2Fflex-knowledge%2F</url>
    <content type="text"><![CDATA[语法篇一、flex是啥?flex即Flexible Box，意为弹性盒布局，用来为盒状模型提供最大的灵活性。（任何一个容器都可以被指定为flex布局）用法：display:flex 注意设置为flex布局之后，子元素的float，clear，vertical-align属性将失效 二、基本概念采用flex布局的元素，称为flex容器（flex container）简称“容器”，它的所有子元素自动成为容器成员，称为flex项目（flex item），简称“项目”。容器默认存在两根轴，水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start,结束位置叫做mainend；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性以下有六个属性设置在容器上。 flex-direction flex-wrap flex-flow justify-content align-items align-content 3.1 flex-direction属性flex-direction属性决定主轴方向（即项目的排列方向）它可能有四个值 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿 column-reverse：主轴为垂直方向，起点在下沿 3.2 flex-wrap属性默认情况下，项目都排在一条线（又称轴线）上，flex-wrap属性定义，如果一条轴线排不下，如何换行。它可能取三个值 nowrap(默认)：不换行 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方 3.3 flex-flowflex-flow属性是flex-direction属性与flex-wrap属性的简写形式，默认值为row nowrap（水平排列，不换行） 3.4 justify-content属性justify-content属性定义了项目在主轴上的对齐方式。（主轴如果是水平的话，那么就是定义项目是否水平居中那些的了）它可能取5个值，具体对齐方式与主轴的方向有关，下面假设主轴为从左到右 flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间的间隔都相等 space-around：每个项目两侧的间隔相等。所以，每个项目之间的间隔比项目与边框的间隔大一倍 3.5 align-items属性align-it属性定义项目在交叉轴上如何对齐。（默认的就是垂直方向的居中那些问题啦）它可能有五个值 flex-start:交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐（一般的话就是垂直居中啦） baseline：项目的第一行文字的基线对齐。 stretch（默认）：如果项目未设置高度或设为auto，将占满整个容器的高度 3.6 align-content属性align-content属性定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用它可能的值有 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间平均分布 space-around:每根轴线两侧的间隔都相等，所以轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴 四、项目的属性以下6个属性设置在项目上。 order flex-grow flex-shrink blex-basis flex align-self 4.1 order属性order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0. 4.2 flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 注 如果所有的项目的flex-grow属性都为一，则它们将等分剩余空间(如果有的话)，如果每个项目的属性值不同，那么首先就是先把剩余空间等分成所有项目flex-grow值之和份，然后每个项目根据自己的flex-grow值分剩余空间。例：三个项目，两个flex-grow值为1，一个值为2，则将剩余空间4等份，其中那个flex-grow值为2的项目分得2/4的剩余空间 4.3 flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 注如果所有项目的flex-shrink属性都为1负值对该属性无效 4.4 flex-basis属性flex-basis属性定义了再分配多余空间之前，项目占据主轴的空间。浏览器根据这个属性，计算主轴是否有多余的空间，它默认为auto，即项目的本来大小。 4.5flex属性flex属性是flex-grow，flex-shrink，flex-basis的简写，默认值为0 1 auto，后两个属性可选。（一般也是直接用这个） 该属性有两个快捷键值：auto（1 1 auto）和none（0 0 auto）然后肯定推荐用这个啦。 4.6 align-self属性align-self属性允许单个项目有着与其他项目不一样的对齐方式，可覆盖align-item属性，默认为auto，表示继承父元素的align-items属性，如果没有父元素，等同于stretch。该属性和容器的align-items属性一样可能取6个值，除了auto，其他都和它一样。 后记本文学习自阮一峰老师的flex布局教程语法篇（完）]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端布局</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则练习题]]></title>
    <url>%2F2018%2F06%2F30%2Freg-trian%2F</url>
    <content type="text"><![CDATA[前言我们在上次说到了一些关于正则表达式的基本知识，然后学啥东西都一样，要会用，不然干看着概念，就算你厉害把所有的知识点都背下来了，但是一段时间不看就会忘记了，所以咧，还是要找一点题练一下，这次的话就随便找了几道我做项目的时候做的正则的题型，权当复习吧邮箱校验 要求：能够识别判断当前使用比较多的免费邮箱，企业邮箱不熟，以后再考虑1234let demo = "123@qq.com";let pataern = /^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9]+)*\.[a-zA-Z0-9]&#123;2,6&#125;/;let res = pataern.test(demo);console.log(res);//true 账户姓名校验 要求：1-n个以字母开头的字符串12345678910const n = 5;let user1 = 'ssh';let user2 = '1word';function UserName(user) &#123; let reg = /^[a-zA-Z][a-zA-Z0-9_]&#123;0,4&#125;$/; let result = reg.test(user); return result;&#125;console.log(UserName(user1));//trueconsole.log(UserName(user2));//false 密码校验 要求：6-12字母、数字、下划线123456789let pwd1 = 's';let pwd2 = '1_word';function Password(pwd) &#123; let reg = /[a-zA-Z0-9_]&#123;6,12&#125;$/; let result = reg.test(pwd); return result;&#125;console.log(Password(pwd1));//falseconsole.log(Password(pwd2));//true 格式化金额 要求：将数字转换为形如￥2,000.12的形式1let 获取金额中的有效数字 要求：将￥2,000.20中的有效数字提取出来，如2000.2123456789let str = `CNY 1,000.0`;function tiqu(str)&#123; let reg = /[^0-9\.]/g;//去掉货币符号和逗号 str = str.replace(reg,''); str = parseFloat(str);//如果去掉无效的小数数据 return str;&#125;let res = tiqu(str);console.log(res);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>正则</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建自己的github博客]]></title>
    <url>%2F2018%2F06%2F25%2Fbuild-hexo%2F</url>
    <content type="text"><![CDATA[1 什么是 HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 2 开始搭建博客2.1 前提电脑安装好 Node 和 Git 2.2 安装直接用 npm 全局安装（嫌慢的话就用 cnpm 吧）1npm install -g hexo-cli 2.3 搭建博客网站完成 Hexo 的安装之后，就可以执行下面的命令，在指定文件夹内生成系列的网站文件123hexo init folderNamecd folderNamenpm install // 安装依赖 注意好像新版本的 hexo-cli 在初始化项目的时候会自动安装依赖，如下图\鉴于网络因素，直接用npm 安装依赖实在是太慢了，想快一点的同学看到他在装依赖的时候，不要怂，直接就是 Ctrl+C 断了它进程，然后自己进入文件夹用 cnpm install 装依赖。 3 查看效果运行下面代码，开启博客1hexo server 最后打开4000端口就可以看到自己的博客网站啦 4 项目结构新建个项目之后，指定的文件夹的目录如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 4.1 _config.yml网站的 配置 信息，小伙伴们可以在这边配置大部分的参数。 4.2 package.json这个就不说了，就是这个项目的信息了。 4.3 scaffold 文件夹模板 文件夹。当我们新建文章的时候，Hexo 会根据 scaffold 来建议文件\Hexo 的模板是指在新建的 markdown 文件中默认填充的内容。例如，如果我们修改 scaffold/post.md 中的 Front-matter 内容，那么没一次新建一篇文章都会包含这个修改 4.4 source 文件夹资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _(下划线)的文件/文件夹和隐藏的文件将会被忽略（意思就是在这里不要以下划线开头去命名新建的文件/文件夹）。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 4.5 themes 文件夹主题 文件夹。Hexo会根据主题来生成静态页面。这里的话，推荐一个主题吧。 next 我也不知道为啥要推荐它，反正就瞅他顺眼+多人用+文档全吧。不过想用其他也随便吧，反正写博客嘛，咱们还是多关注内容，外观的话，顺眼舒服就行了。 5 开始写博客这个就很简单了，三步走直接搞定啦。 直接找个能写 markdown 的工具就开始写我们的博客了。这里的话我推荐用一下 『有道云笔记』吧（『有道云笔记』的工作人员看到了麻烦给点广告费啊~(@^_^@)~），平常就可以在上面做做笔记，写写博客，写完直接导出来一个 markdown 文件。当然其他编辑器一般也是可以方便的写 markdown 的。\『注意：这里有道云笔记有个坑点，不是会员不给 markdown 引入本地的图片，如果想用图片的话只能引入网上外链，这时候就要使用图床了，这边推荐用一下『七牛云』吧，有免费 10 G 的空间可以用。（『七牛云』的小姐姐看到麻烦给我叫个鸡腿），里面还有一些使用技巧，这里就不说了，大家自己再去百度玩一下吧。』 将写完的 markdowm 文件直接丢到 source/_posts 文件夹内，但是为了方便分类和管理自己的文章，在导出的 markdown 文件加入下面这些东西 1234567891011---#文章标题title: flex布局#文章发布时间date: 2018-08-26 21:37:55#文章的标签，可多写几个tags: 前端布局#文章分类categories: flex---#下面就是我们的文章正文啦 上面然后就可以在我们的站点中看到我们新增的博客啦。 6 后续讲到这里，我们的博客已经搭建起来的了，如果还有不明白的东西可以去翻翻 hexo 中文文档。最后咧，虽然博客搭起来了，也能写了，但是不自己配置一下的话，还是有点简陋的，所以下次就来讲讲如何去配置我们的 Hexo 博客吧。]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>搭建博客</tag>
      </tags>
  </entry>
</search>
