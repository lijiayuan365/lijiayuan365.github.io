<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2018%2F10%2F13%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[Hello World你好]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试2]]></title>
    <url>%2F2018%2F10%2F13%2F%E6%B5%8B%E8%AF%952%2F</url>
    <content type="text"><![CDATA[Hello World你好]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[flex布局]]></title>
    <url>%2F2018%2F08%2F26%2Fflex%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[语法篇一、flex是啥?flex即Flexible Box，意为弹性盒布局，用来为盒状模型提供最大的灵活性。（任何一个容器都可以被指定为flex布局）用法：display:flex\==注意设置为flex布局之后，子元素的float，clear，vertical-align属性将失效==\ 二、基本概念采用flex布局的元素，称为flex容器（flex container）简称“容器”，它的所有子元素自动成为容器成员，称为flex项目（flex item），简称“项目”。\容器默认存在两根轴，水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start,结束位置叫做mainend；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\ 三、容器的属性以下有六个属性设置在容器上。\ flex-direction flex-wrap flex-flow justify-content align-items align-content3.1 flex-direction属性flex-direction属性决定主轴方向（即项目的排列方向）\它可能有四个值 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿 column-reverse：主轴为垂直方向，起点在下沿3.2 flex-wrap属性默认情况下，项目都排在一条线（又称轴线）上，flex-wrap属性定义，如果一条轴线排不下，如何换行。它可能取三个值 nowrap(默认)：不换行 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方3.3 flex-flowflex-flow属性是flex-direction属性与flex-wrap属性的简写形式，默认值为row nowrap（水平排列，不换行）3.4 justify-content属性justify-content属性定义了项目在主轴上的对齐方式。（主轴如果是水平的话，那么就是定义项目是否水平居中那些的了）\它可能取5个值，具体对齐方式与主轴的方向有关，下面假设主轴为从左到右 flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间的间隔都相等 space-around：每个项目两侧的间隔相等。所以，每个项目之间的间隔比项目与边框的间隔大一倍3.5 align-items属性align-it属性定义项目在交叉轴上如何对齐。（默认的就是垂直方向的居中那些问题啦）\它可能有五个值\ flex-start:交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐（一般的话就是垂直居中啦） baseline：项目的第一行文字的基线对齐。 stretch（默认）：如果项目未设置高度或设为auto，将占满整个容器的高度3.6 align-content属性align-content属性定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用\它可能的值有 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间平均分布 space-around:每根轴线两侧的间隔都相等，所以轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴四、项目的属性以下6个属性设置在项目上。 order flex-grow flex-shrink blex-basis flex align-self4.1 order属性order属性定义项目的排列顺序，数值越小，排列越靠前，默认为0.4.2 flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\==注== 如果所有的项目的flex-grow属性都为一，则它们将等分剩余空间(如果有的话)，如果每个项目的属性值不同，那么首先就是先把剩余空间等分成所有项目flex-grow值之和份，然后每个项目根据自己的flex-grow值分剩余空间。\例：三个项目，两个flex-grow值为1，一个值为2，则将剩余空间4等份，其中那个flex-grow值为2的项目分得2/4的剩余空间4.3 flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\==注==如果所有项目的flex-shrink属性都为1负值对该属性无效4.4 flex-basis属性flex-basis属性定义了再分配多余空间之前，项目占据主轴的空间。浏览器根据这个属性，计算主轴是否有多余的空间，它默认为auto，即项目的本来大小。4.5flex属性flex属性是flex-grow，flex-shrink，flex-basis的简写，默认值为0 1 auto，后两个属性可选。（一般也是直接用这个）\==该属性有两个快捷键值：auto（1 1 auto）和none（0 0 auto）==然后肯定推荐用这个啦。4.6 align-self属性align-self属性允许单个项目有着与其他项目不一样的对齐方式，可覆盖align-item属性，默认为auto，表示继承父元素的align-items属性，如果没有父元素，等同于stretch。该属性和容器的align-items属性一样可能取6个值，除了auto，其他都和它一样。后记本文学习自阮一峰老师的flex布局教程语法篇\（完）]]></content>
      <categories>
        <category>flex</category>
      </categories>
      <tags>
        <tag>前端布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则练习题]]></title>
    <url>%2F2018%2F06%2F30%2F%E6%AD%A3%E5%88%99%E7%BB%83%E4%B9%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言我们在上次说到了一些关于正则表达式的基本知识，然后学啥东西都一样，要会用，不然干看着概念，就算你厉害把所有的知识点都背下来了，但是一段时间不看就会忘记了，所以咧，还是要找一点题练一下，这次的话就随便找了几道我做项目的时候做的正则的题型，权当复习吧邮箱校验 要求：能够识别判断当前使用比较多的免费邮箱，企业邮箱不熟，以后再考虑1234let demo = "123@qq.com";let pataern = /^[a-zA-Z0-9_.]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9]+)*\.[a-zA-Z0-9]&#123;2,6&#125;/;let res = pataern.test(demo);console.log(res);//true 账户姓名校验 要求：1-n个以字母开头的字符串12345678910const n = 5;let user1 = 'ssh';let user2 = '1word';function UserName(user) &#123; let reg = /^[a-zA-Z][a-zA-Z0-9_]&#123;0,4&#125;$/; let result = reg.test(user); return result;&#125;console.log(UserName(user1));//trueconsole.log(UserName(user2));//false 密码校验 要求：6-12字母、数字、下划线123456789let pwd1 = 's';let pwd2 = '1_word';function Password(pwd) &#123; let reg = /[a-zA-Z0-9_]&#123;6,12&#125;$/; let result = reg.test(pwd); return result;&#125;console.log(Password(pwd1));//falseconsole.log(Password(pwd2));//true 格式化金额 要求：将数字转换为形如￥2,000.12的形式1let 获取金额中的有效数字 要求：将￥2,000.20中的有效数字提取出来，如2000.2123456789let str = `CNY 1,000.0`;function tiqu(str)&#123; let reg = /[^0-9\.]/g;//去掉货币符号和逗号 str = str.replace(reg,''); str = parseFloat(str);//如果去掉无效的小数数据 return str;&#125;let res = tiqu(str);console.log(res);]]></content>
      <categories>
        <category>javascript 正则</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则基础知识]]></title>
    <url>%2F2018%2F06%2F27%2F%E6%AD%A3%E5%88%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[正则表达式前言 定义正则12let reg = new RegExp(&quot;G&quot;);//RegExp对象，参数就是我们要制定的规则let reg = /G/; //一般写法，推荐使用，性能更好 常用方法 test()：在字符串中查找符合正则的内容，找到返回true，反之返回false 1234//判断数字是否有非数字let str =&apos;1233456&apos;;let reg = /\D/;console.log(reg.test(str));//false exec() 12345678910111213/*RegExp的exec()方法和String的match()方法很类似，它对一个指定的字符串执行一个正则表达式匹配，如果没有找到任何一个匹配，它将返回null，否则返回一个数组，这个数组的第一个元素包含的是与正则表达式相匹配的字符串,余下的所有元素包含的是匹配的各个分组。而且，正则表达式对象的index属性还包含了匹配发生的字符串的位置，属性input引用的则是被检索的字符串。如果正则表达式具有g标志，它将把该对象的lastIndex属性设置到紧接着匹配字符串的位置开始检索，如果exec()没有发现任何匹配，它将把 lastIndex属性重置为0，这一特殊的行为可以使你可以反复调用exec()遍历一个字符串中所有的正则表达式匹配。*/let str5 = &apos;cat,fat,bat,sat,cct&apos;;let reg5 = /.at/g;reg5.lastIndex = 10;console.log(reg5.exec(str5));//[ &apos;cat&apos;, index: 0, input: &apos;cat,fat,bat,sat,cct&apos; ] replace():查找符合正则的字符串，替换成对应的字符串 1234567891011121314//替换关键字let str4 = &apos;七夕，JJ，我在月下等你&apos;;let reg4 = /七夕|JJ/g;/*str4 = str4.replace(reg4,&apos;*&apos;);console.log(str4);//*，*，我在月下等你.有点问题啊，那么就不要直接替换，我们用个回调函数解决*/str4 = str4.replace(reg4,function (str4) &#123; let res = &apos;&apos;; for(let i =0;i&lt;str4.length;i++)&#123; res +=&apos;*&apos;; &#125; return res;&#125;);console.log(str4);//**，**，我在月下等你 search():在字符串搜索符合正则的内容，搜索到就返回出现的位置注意：如果找到多个，则只会返回第一个找到的字符的位置，找不到就返回- 1234//在字符串中找到字母b，且不区分大小写let str2 = &apos;abcbdef&apos;;let reg2 = /B/gi;console.log(str2.search(reg2));//2 找到的第一个字符的位置 match():在字符串中搜索符合规则的内容，搜索成功就返回内容，反之则返回null 1234//找到指定格式的所有数字let str3 = &apos;haj123sdk54hask33dkhalsd879&apos;;let reg3 = /\d+/g;//每次至少匹配一个数字console.log(str3.match(reg3));//[ &apos;123&apos;, &apos;54&apos;, &apos;33&apos;, &apos;879&apos; ] 常见字符 转义字符这几个常见转义字符还是要的顺手记下滴12345678\s :空格\S :非空格\d :数字\D :非数字\w :字符（字母，数字，下划线那些）\W :非字符. :任意字符\. :真正的点 量词123456&#123;n,m&#125; :出现n~m次&#123;n,&#125; :至少n次&#123;n&#125; :出现n次* :任意次? :1次或者0次，相当于&#123;0,&#125;+ :1~n次 其他符号123456^ :匹配输入串的开始位置$ :匹配输入串的结束位置[] :[]里面的任意字符[^] :非[]里面的任意字符() :分组符，小括号中的项叫做正则的子项$1($n) :正则式中的第1（n）个子项]]></content>
      <categories>
        <category>javascript 正则</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建自己的github博客]]></title>
    <url>%2F2018%2F06%2F25%2F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hello World你好]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
