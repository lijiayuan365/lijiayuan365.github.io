import{_ as i,o as a,c as t,a2 as e}from"./chunks/framework.D3ELoRea.js";const c=JSON.parse('{"title":"环境配置","description":"","frontmatter":{},"headers":[],"relativePath":"job/env.md","filePath":"job/env.md"}'),n={name:"job/env.md"};function l(h,s,p,k,o,r){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h1><p>这边需要使用 windows， 相对于 windows 环境来说，还是 wsl2 配置开发环境更方便，也能够更接近生产环境，终端和开发工具的支持都比较好，配置一个比较好。</p><h2 id="安装-wsl2" tabindex="-1">安装 wsl2 <a class="header-anchor" href="#安装-wsl2" aria-label="Permalink to &quot;安装 wsl2&quot;">​</a></h2><p>直接终端跑 <code>wsl.exe --install</code> 即可。后面会自动下载和安装启动的，默认装的Ubuntu，后面就是设置账户密码那些，设置完毕后终端就会多出一个Ubuntu的入口。了解更多看<a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noreferrer">文档</a></p><h2 id="安装-zsh" tabindex="-1">安装 zsh <a class="header-anchor" href="#安装-zsh" aria-label="Permalink to &quot;安装 zsh&quot;">​</a></h2><p>在 Windows Subsystem for Linux (WSL) 2 中使用 Zsh (Z shell) 是一个常见的选择，因为 Zsh 提供了比默认的 Bash shell 更多的功能和更友好的用户界面。以下是在 WSL2 中安装和使用 Zsh 的基本步骤：</p><ol><li>安装 Zsh：进到终端跑命令</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zsh</span></span></code></pre></div><ol start="2"><li>安装 Oh My Zsh：Oh My Zsh 是一个流行的 Zsh 框架，它提供了许多有用的功能和主题。安装 Oh My Zsh 的命令如下：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span></code></pre></div><ol start="3"><li>设置 zsh 为默认 shell</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chsh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zsh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="配置-node-环境" tabindex="-1">配置 node 环境 <a class="header-anchor" href="#配置-node-环境" aria-label="Permalink to &quot;配置 node 环境&quot;">​</a></h2><p>目前用的是跨平台的 <a href="https://github.com/Schniz/fnm" target="_blank" rel="noreferrer">fnm</a> 作为 node 版本的管理工具</p><ol><li>安装</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://fnm.vercel.app/install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 没有装unzip的话需要提前安装unzip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unzip</span></span></code></pre></div><ol start="2"><li><p>启动配置 上面的命令结束会出现一段配置让你粘贴到 shell 配置文件那边，复制到 .bashrc/.zshrc 里面，然后 source .bashrc/.zshrc 启用一下就可以使用了</p></li><li><p>使用 node，可以看下面命令，或者参考项目里面的.nvmrc 等配置文件了</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 18版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fnm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v18</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装20版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fnm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用18版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fnm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v18</span></span></code></pre></div><h2 id="配置-docker-环境" tabindex="-1">配置 docker 环境 <a class="header-anchor" href="#配置-docker-环境" aria-label="Permalink to &quot;配置 docker 环境&quot;">​</a></h2><p>官方推荐的话是是安装 <a href="https://docs.docker.com/desktop/features/wsl/#download" target="_blank" rel="noreferrer">docker desktop</a>, 这种方式简单方便，又有可视化，确实方便。但是镜像默认装在C盘，并且还是有点不稳定，所有这边选择使用 Linux 方式安装。其实也简单,一条脚本的事情。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://get.docker.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mirror</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AzureChinaCloud</span></span></code></pre></div><p>安装成功后会提示你要不要运行 Docker 守护进程的非特权模式，需要的话跑下面这个命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockerd-rootless-setuptool.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 要是运行不成功的话可能需要安装一下依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uidmap</span></span></code></pre></div><p>这个命令会配置 Docker 守护进程，使其可以在非 root 用户下运行。更多关于非特权模式的信息，看 <a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noreferrer">Docker</a> 文档。</p><blockquote><p>运行 Docker 守护进程并允许非 root 用户访问 如果您希望以完全特权模式运行 Docker 守护进程，但同时允许非 root 用户访问，您需要配置 Docker 守护进程的 Unix socket，使其可以被特定用户组访问。通常，这涉及到创建一个名为 docker 的用户组，并将需要访问 Docker 的用户添加到该组。更多详细信息，您可以访问 Docker 文档。</p></blockquote><blockquote><p>安全警告 访问具有特权的 Docker 守护进程的远程 API 等同于在宿主机上拥有 root 权限。这意味着，如果攻击者能够访问 Docker 守护进程的 API，他们就能够执行与 root 用户相同的操作，包括但不限于查看或修改宿主机上的文件、网络配置和系统资源。因此，保护 Docker 守护进程的 API 端点非常重要，应仅允许受信任的用户和网络访问。</p></blockquote><blockquote><p>保护 API 端点：您应该确保 Docker 守护进程的 API 端点仅通过 HTTPS 和证书来访问，以防止未授权访问。 限制访问：仅允许受信任的用户和网络访问 Docker 守护进程的 API。 安全配置：考虑使用安全配置文件（如 AppArmor 或 SELinux 策略）来限制容器的行为，减少潜在的安全风险。</p></blockquote><p>跑成功后设置一下开机启动</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loginctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable-linger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ljy</span></span></code></pre></div><p>安装 docker-compose</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span></span></code></pre></div>`,31)]))}const F=i(n,[["render",l]]);export{c as __pageData,F as default};
